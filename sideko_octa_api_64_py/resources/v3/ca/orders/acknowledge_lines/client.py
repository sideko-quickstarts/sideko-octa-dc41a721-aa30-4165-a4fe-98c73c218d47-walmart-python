import typing

from sideko_octa_api_64_py.core import (
    AsyncBaseClient,
    BinaryResponse,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    to_content,
)
from sideko_octa_api_64_py.types import params


class AcknowledgeLinesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client

    def create(
        self,
        *,
        wm_consumer_channel_type: str,
        wm_consumer_id: str,
        wm_qos_correlation_id: str,
        wm_sec_auth_signature: str,
        wm_sec_timestamp: str,
        wm_svc_name: str,
        order_lines: params.V3CaOrdersAcknowledgeLinesCreateBodyOrderLines,
        purchase_order_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Acknowledge Order Lines

        You can use this API to acknowledge an orderlines, including all of its quantities. Partial acknowledgement is not allowed, all quantities of an orderline has to be acknowledged.
        Walmart requires a seller to acknowledge orders within **four** hours of receipt of the order, except in extenuating circumstances.

        The response to a successful call contains the acknowledged order.

        In general, only orders that are in a **Created** state should be acknowledged. As a good practice, acknowledge your orders to avoid underselling. Orders with line items that are shipped or canceled should not be re-acknowledged.

        POST /v3/ca/orders/{purchaseOrderId}/acknowledgeLines

        Args:
            WM_CONSUMER.CHANNEL.TYPE: A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
            WM_CONSUMER.ID: A unique ID required to access the API
            WM_QOS.CORRELATION_ID: A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
            WM_SEC.AUTH_SIGNATURE: The vendor's digital signature, generated by running the JAR file or custom generation code
            WM_SEC.TIMESTAMP: The Epoch timestamp
            WM_SVC.NAME: Walmart Service Name
            orderLines: V3CaOrdersAcknowledgeLinesCreateBodyOrderLines
            purchaseOrderId: The purchase order ID
            request_options: Additional options to customize the HTTP request

        Returns:
            Successful Operation

        Raises:
            ApiError: A custom exception class that provides additional context
                for API errors, including the HTTP status code and response body.

        Examples:
        ```py
        client.v3.ca.orders.acknowledge_lines.create(
            wm_consumer_channel_type="string",
            wm_consumer_id="Get the Consumer ID from Developer Center after logging in",
            wm_qos_correlation_id="b3261d2d-028a-4ef7-8602-633c23200af6",
            wm_sec_auth_signature="9fg3TPeRt0WSGbXNGGj4kSQ9L6PMBX.....9Zj5aDyg=",
            wm_sec_timestamp="1443748249449",
            wm_svc_name="Walmart Service Name",
            order_lines={
                "order_line": [
                    {
                        "line_number": "string",
                        "order_line_statuses": {
                            "order_line_status": [
                                {
                                    "status": "ACKNOWLEDGED",
                                    "status_quantity": {
                                        "amount": "string",
                                        "unit_of_measurement": "EA",
                                    },
                                }
                            ]
                        },
                    }
                ]
            },
            purchase_order_id="string",
        )
        ```
        """
        _header: typing.Dict[str, str] = {}
        _header["WM_CONSUMER.CHANNEL.TYPE"] = str(wm_consumer_channel_type)
        _header["WM_CONSUMER.ID"] = str(wm_consumer_id)
        _header["WM_QOS.CORRELATION_ID"] = str(wm_qos_correlation_id)
        _header["WM_SEC.AUTH_SIGNATURE"] = str(wm_sec_auth_signature)
        _header["WM_SEC.TIMESTAMP"] = str(wm_sec_timestamp)
        _header["WM_SVC.NAME"] = str(wm_svc_name)
        _content = to_content(file={"order_lines": order_lines})
        _content_type = "application/xml"
        return self._base_client.request(
            method="POST",
            path=f"/v3/ca/orders/{purchase_order_id}/acknowledgeLines",
            headers=_header,
            content=_content,
            content_type=_content_type,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )


class AsyncAcknowledgeLinesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client

    async def create(
        self,
        *,
        wm_consumer_channel_type: str,
        wm_consumer_id: str,
        wm_qos_correlation_id: str,
        wm_sec_auth_signature: str,
        wm_sec_timestamp: str,
        wm_svc_name: str,
        order_lines: params.V3CaOrdersAcknowledgeLinesCreateBodyOrderLines,
        purchase_order_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Acknowledge Order Lines

        You can use this API to acknowledge an orderlines, including all of its quantities. Partial acknowledgement is not allowed, all quantities of an orderline has to be acknowledged.
        Walmart requires a seller to acknowledge orders within **four** hours of receipt of the order, except in extenuating circumstances.

        The response to a successful call contains the acknowledged order.

        In general, only orders that are in a **Created** state should be acknowledged. As a good practice, acknowledge your orders to avoid underselling. Orders with line items that are shipped or canceled should not be re-acknowledged.

        POST /v3/ca/orders/{purchaseOrderId}/acknowledgeLines

        Args:
            WM_CONSUMER.CHANNEL.TYPE: A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
            WM_CONSUMER.ID: A unique ID required to access the API
            WM_QOS.CORRELATION_ID: A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
            WM_SEC.AUTH_SIGNATURE: The vendor's digital signature, generated by running the JAR file or custom generation code
            WM_SEC.TIMESTAMP: The Epoch timestamp
            WM_SVC.NAME: Walmart Service Name
            orderLines: V3CaOrdersAcknowledgeLinesCreateBodyOrderLines
            purchaseOrderId: The purchase order ID
            request_options: Additional options to customize the HTTP request

        Returns:
            Successful Operation

        Raises:
            ApiError: A custom exception class that provides additional context
                for API errors, including the HTTP status code and response body.

        Examples:
        ```py
        await client.v3.ca.orders.acknowledge_lines.create(
            wm_consumer_channel_type="string",
            wm_consumer_id="Get the Consumer ID from Developer Center after logging in",
            wm_qos_correlation_id="b3261d2d-028a-4ef7-8602-633c23200af6",
            wm_sec_auth_signature="9fg3TPeRt0WSGbXNGGj4kSQ9L6PMBX.....9Zj5aDyg=",
            wm_sec_timestamp="1443748249449",
            wm_svc_name="Walmart Service Name",
            order_lines={
                "order_line": [
                    {
                        "line_number": "string",
                        "order_line_statuses": {
                            "order_line_status": [
                                {
                                    "status": "ACKNOWLEDGED",
                                    "status_quantity": {
                                        "amount": "string",
                                        "unit_of_measurement": "EA",
                                    },
                                }
                            ]
                        },
                    }
                ]
            },
            purchase_order_id="string",
        )
        ```
        """
        _header: typing.Dict[str, str] = {}
        _header["WM_CONSUMER.CHANNEL.TYPE"] = str(wm_consumer_channel_type)
        _header["WM_CONSUMER.ID"] = str(wm_consumer_id)
        _header["WM_QOS.CORRELATION_ID"] = str(wm_qos_correlation_id)
        _header["WM_SEC.AUTH_SIGNATURE"] = str(wm_sec_auth_signature)
        _header["WM_SEC.TIMESTAMP"] = str(wm_sec_timestamp)
        _header["WM_SVC.NAME"] = str(wm_svc_name)
        _content = to_content(file={"order_lines": order_lines})
        _content_type = "application/xml"
        return await self._base_client.request(
            method="POST",
            path=f"/v3/ca/orders/{purchase_order_id}/acknowledgeLines",
            headers=_header,
            content=_content,
            content_type=_content_type,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )
