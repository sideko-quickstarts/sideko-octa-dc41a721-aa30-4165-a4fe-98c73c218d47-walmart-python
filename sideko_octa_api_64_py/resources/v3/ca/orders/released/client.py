import typing

from sideko_octa_api_64_py.core import (
    AsyncBaseClient,
    BinaryResponse,
    QueryParams,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    encode_query_param,
    to_encodable,
    type_utils,
)


class ReleasedClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client

    def list(
        self,
        *,
        wm_consumer_channel_type: str,
        wm_consumer_id: str,
        wm_qos_correlation_id: str,
        wm_sec_auth_signature: str,
        wm_sec_timestamp: str,
        wm_svc_name: str,
        created_start_date: str,
        created_end_date: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        limit: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        product_info: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Get all released orders

        Retrieves all the orders with line items that are in the "created" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.



        ---
        **Note**

        There is a maximum limit of 2000 orders that can be downloaded at a time. Attempting to download more than 2000 orders will return an error.

        ---

        GET /v3/ca/orders/released

        Args:
            createdEndDate: End Date for querying all purchase orders after this date. Use epoch time format in seconds.
            limit: The number of orders to be returned. Cannot be larger than 200.
            productInfo: Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true.
            WM_CONSUMER.CHANNEL.TYPE: A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
            WM_CONSUMER.ID: A unique ID required to access the API
            WM_QOS.CORRELATION_ID: A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
            WM_SEC.AUTH_SIGNATURE: The vendor's digital signature, generated by running the JAR file or custom generation code
            WM_SEC.TIMESTAMP: The Epoch timestamp
            WM_SVC.NAME: Walmart Service Name
            createdStartDate: Start Date for querying all purchase orders after this date. Use epoch time format in seconds.
            request_options: Additional options to customize the HTTP request

        Returns:
            Successful Operation

        Raises:
            ApiError: A custom exception class that provides additional context
                for API errors, including the HTTP status code and response body.

        Examples:
        ```py
        client.v3.ca.orders.released.list(
            wm_consumer_channel_type="string",
            wm_consumer_id="Get the Consumer ID from Developer Center after logging in",
            wm_qos_correlation_id="b3261d2d-028a-4ef7-8602-633c23200af6",
            wm_sec_auth_signature="9fg3TPeRt0WSGbXNGGj4kSQ9L6PMBX.....9Zj5aDyg=",
            wm_sec_timestamp="1443748249449",
            wm_svc_name="Walmart Service Name",
            created_start_date="string",
        )
        ```
        """
        _query: QueryParams = {}
        encode_query_param(
            _query,
            "createdStartDate",
            to_encodable(item=created_start_date, dump_with=str),
            style="form",
            explode=True,
        )
        if not isinstance(created_end_date, type_utils.NotGiven):
            encode_query_param(
                _query,
                "createdEndDate",
                to_encodable(item=created_end_date, dump_with=str),
                style="form",
                explode=True,
            )
        if not isinstance(limit, type_utils.NotGiven):
            encode_query_param(
                _query,
                "limit",
                to_encodable(item=limit, dump_with=str),
                style="form",
                explode=True,
            )
        if not isinstance(product_info, type_utils.NotGiven):
            encode_query_param(
                _query,
                "productInfo",
                to_encodable(item=product_info, dump_with=str),
                style="form",
                explode=True,
            )
        _header: typing.Dict[str, str] = {}
        _header["WM_CONSUMER.CHANNEL.TYPE"] = str(wm_consumer_channel_type)
        _header["WM_CONSUMER.ID"] = str(wm_consumer_id)
        _header["WM_QOS.CORRELATION_ID"] = str(wm_qos_correlation_id)
        _header["WM_SEC.AUTH_SIGNATURE"] = str(wm_sec_auth_signature)
        _header["WM_SEC.TIMESTAMP"] = str(wm_sec_timestamp)
        _header["WM_SVC.NAME"] = str(wm_svc_name)
        return self._base_client.request(
            method="GET",
            path="/v3/ca/orders/released",
            query_params=_query,
            headers=_header,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )


class AsyncReleasedClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client

    async def list(
        self,
        *,
        wm_consumer_channel_type: str,
        wm_consumer_id: str,
        wm_qos_correlation_id: str,
        wm_sec_auth_signature: str,
        wm_sec_timestamp: str,
        wm_svc_name: str,
        created_start_date: str,
        created_end_date: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        limit: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        product_info: typing.Union[
            typing.Optional[str], type_utils.NotGiven
        ] = type_utils.NOT_GIVEN,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BinaryResponse:
        """
        Get all released orders

        Retrieves all the orders with line items that are in the "created" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.



        ---
        **Note**

        There is a maximum limit of 2000 orders that can be downloaded at a time. Attempting to download more than 2000 orders will return an error.

        ---

        GET /v3/ca/orders/released

        Args:
            createdEndDate: End Date for querying all purchase orders after this date. Use epoch time format in seconds.
            limit: The number of orders to be returned. Cannot be larger than 200.
            productInfo: Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true.
            WM_CONSUMER.CHANNEL.TYPE: A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
            WM_CONSUMER.ID: A unique ID required to access the API
            WM_QOS.CORRELATION_ID: A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
            WM_SEC.AUTH_SIGNATURE: The vendor's digital signature, generated by running the JAR file or custom generation code
            WM_SEC.TIMESTAMP: The Epoch timestamp
            WM_SVC.NAME: Walmart Service Name
            createdStartDate: Start Date for querying all purchase orders after this date. Use epoch time format in seconds.
            request_options: Additional options to customize the HTTP request

        Returns:
            Successful Operation

        Raises:
            ApiError: A custom exception class that provides additional context
                for API errors, including the HTTP status code and response body.

        Examples:
        ```py
        await client.v3.ca.orders.released.list(
            wm_consumer_channel_type="string",
            wm_consumer_id="Get the Consumer ID from Developer Center after logging in",
            wm_qos_correlation_id="b3261d2d-028a-4ef7-8602-633c23200af6",
            wm_sec_auth_signature="9fg3TPeRt0WSGbXNGGj4kSQ9L6PMBX.....9Zj5aDyg=",
            wm_sec_timestamp="1443748249449",
            wm_svc_name="Walmart Service Name",
            created_start_date="string",
        )
        ```
        """
        _query: QueryParams = {}
        encode_query_param(
            _query,
            "createdStartDate",
            to_encodable(item=created_start_date, dump_with=str),
            style="form",
            explode=True,
        )
        if not isinstance(created_end_date, type_utils.NotGiven):
            encode_query_param(
                _query,
                "createdEndDate",
                to_encodable(item=created_end_date, dump_with=str),
                style="form",
                explode=True,
            )
        if not isinstance(limit, type_utils.NotGiven):
            encode_query_param(
                _query,
                "limit",
                to_encodable(item=limit, dump_with=str),
                style="form",
                explode=True,
            )
        if not isinstance(product_info, type_utils.NotGiven):
            encode_query_param(
                _query,
                "productInfo",
                to_encodable(item=product_info, dump_with=str),
                style="form",
                explode=True,
            )
        _header: typing.Dict[str, str] = {}
        _header["WM_CONSUMER.CHANNEL.TYPE"] = str(wm_consumer_channel_type)
        _header["WM_CONSUMER.ID"] = str(wm_consumer_id)
        _header["WM_QOS.CORRELATION_ID"] = str(wm_qos_correlation_id)
        _header["WM_SEC.AUTH_SIGNATURE"] = str(wm_sec_auth_signature)
        _header["WM_SEC.TIMESTAMP"] = str(wm_sec_timestamp)
        _header["WM_SVC.NAME"] = str(wm_svc_name)
        return await self._base_client.request(
            method="GET",
            path="/v3/ca/orders/released",
            query_params=_query,
            headers=_header,
            cast_to=BinaryResponse,
            request_options=request_options or default_request_options(),
        )
